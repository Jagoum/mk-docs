{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My MkDocs Project \u00b6 This is an example MkDocs project using the Material theme. Get Started \u00b6 Edit the index.md file to update the homepage content. Add more pages in the docs/ directory. Customize your site using the mkdocs.yml file. Check out the About page to learn more.","title":"Home"},{"location":"#welcome-to-my-mkdocs-project","text":"This is an example MkDocs project using the Material theme.","title":"Welcome to My MkDocs Project"},{"location":"#get-started","text":"Edit the index.md file to update the homepage content. Add more pages in the docs/ directory. Customize your site using the mkdocs.yml file. Check out the About page to learn more.","title":"Get Started"},{"location":"DK/","text":"Docker Commands Cheat Sheet \u00b6 General Docker Commands \u00b6 docker -d : Start the Docker daemon docker --help : Get help with Docker docker info : Display system-wide information docker ps : List running containers docker ps -a : List all containers docker images : List all images docker exec -it <container> bash : Connect to a container docker logs <container> : Show a container's console log docker stop <container> : Stop a container docker restart <container> : Restart a container docker rm <container> : Remove a container docker port <container> : Show a container's port mapping docker top <container> : List processes in a container docker kill <container> : Kill a container Docker File Commands \u00b6 FROM : Specifies the base image for the build RUN : Executes a command inside the container during build time CMD : Specifies the default command to run when the container starts EXPOSE : Informs Docker that the container listens on specific network ports at runtime ENV : Sets environment variables inside the container COPY : Copies files or directories from the build context into the container ADD : Similar to COPY but supports additional features like URL retrieval and decompression WORKDIR : Sets the working directory for subsequent instructions ARG : Defines variables that users can pass at build-time to the builder with the docker build command ENTRYPOINT : Configures a container to run as an executable VOLUME : Creates a mount point and assigns it to a specified volume USER : Sets the user or UID to use when running the image LABEL : Adds metadata to an image in the form of key-value pairs ONBUILD : Configures commands to run when the image is used as the base for another build Docker Login Commands \u00b6 docker login : Log in to a Registry docker logout : Logout from a Registry Docker Network Commands \u00b6 docker network create -d overlay MyOverlayNetwork : Create an overlay network docker network create -d bridge MyBridgeNetwork : Create a bridge network docker network rm MyOverlayNetwork : Remove a network docker network ls : List networks docker network inspect MyOverlayNetwork : Get information about a network docker network connect MyOverlayNetwork nginx : Connect a running container to a network docker container run -it -d --network=MyOverlayNetwork nginx : Connect a container to a network when it starts docker network disconnect MyOverlayNetwork nginx : Disconnect a container from a network Docker Volume Commands \u00b6 docker volume create mydata : Create a named volume docker volume ls : List volumes docker volume inspect mydata : Get information about a volume docker volume rm mydata : Remove a volume docker volume prune : Remove all unused volumes Docker Image Management Commands \u00b6 docker build -t <image_name> : Build an image docker image pull nginx : Pull an image from Docker Hub docker image pull <Name of The Image>:<Tag> : Pull an image with a specific tag Docker Hub Commands \u00b6 docker login -u <username> : Log in to Docker Hub docker push <username>/<image_name> : Publish an image to Docker Hub docker search <image_name> : Search for an image on Docker Hub docker pull <image_name> : Pull an image from Docker Hub Docker Container Commands \u00b6 docker run --name <container_name> <image_name> : Create and run a container docker run -p <host_port>:<container_port> <image_name> : Run a container with port mapping docker run -d <image_name> : Run a container in the background docker start|stop <container_name> : Start or stop a container docker rm <container_name> : Remove a container docker exec -it <container_name> sh : Open a shell inside a running container","title":"Docker"},{"location":"DK/#docker-commands-cheat-sheet","text":"","title":"Docker Commands Cheat Sheet"},{"location":"DK/#general-docker-commands","text":"docker -d : Start the Docker daemon docker --help : Get help with Docker docker info : Display system-wide information docker ps : List running containers docker ps -a : List all containers docker images : List all images docker exec -it <container> bash : Connect to a container docker logs <container> : Show a container's console log docker stop <container> : Stop a container docker restart <container> : Restart a container docker rm <container> : Remove a container docker port <container> : Show a container's port mapping docker top <container> : List processes in a container docker kill <container> : Kill a container","title":"General Docker Commands"},{"location":"DK/#docker-file-commands","text":"FROM : Specifies the base image for the build RUN : Executes a command inside the container during build time CMD : Specifies the default command to run when the container starts EXPOSE : Informs Docker that the container listens on specific network ports at runtime ENV : Sets environment variables inside the container COPY : Copies files or directories from the build context into the container ADD : Similar to COPY but supports additional features like URL retrieval and decompression WORKDIR : Sets the working directory for subsequent instructions ARG : Defines variables that users can pass at build-time to the builder with the docker build command ENTRYPOINT : Configures a container to run as an executable VOLUME : Creates a mount point and assigns it to a specified volume USER : Sets the user or UID to use when running the image LABEL : Adds metadata to an image in the form of key-value pairs ONBUILD : Configures commands to run when the image is used as the base for another build","title":"Docker File Commands"},{"location":"DK/#docker-login-commands","text":"docker login : Log in to a Registry docker logout : Logout from a Registry","title":"Docker Login Commands"},{"location":"DK/#docker-network-commands","text":"docker network create -d overlay MyOverlayNetwork : Create an overlay network docker network create -d bridge MyBridgeNetwork : Create a bridge network docker network rm MyOverlayNetwork : Remove a network docker network ls : List networks docker network inspect MyOverlayNetwork : Get information about a network docker network connect MyOverlayNetwork nginx : Connect a running container to a network docker container run -it -d --network=MyOverlayNetwork nginx : Connect a container to a network when it starts docker network disconnect MyOverlayNetwork nginx : Disconnect a container from a network","title":"Docker Network Commands"},{"location":"DK/#docker-volume-commands","text":"docker volume create mydata : Create a named volume docker volume ls : List volumes docker volume inspect mydata : Get information about a volume docker volume rm mydata : Remove a volume docker volume prune : Remove all unused volumes","title":"Docker Volume Commands"},{"location":"DK/#docker-image-management-commands","text":"docker build -t <image_name> : Build an image docker image pull nginx : Pull an image from Docker Hub docker image pull <Name of The Image>:<Tag> : Pull an image with a specific tag","title":"Docker Image Management Commands"},{"location":"DK/#docker-hub-commands","text":"docker login -u <username> : Log in to Docker Hub docker push <username>/<image_name> : Publish an image to Docker Hub docker search <image_name> : Search for an image on Docker Hub docker pull <image_name> : Pull an image from Docker Hub","title":"Docker Hub Commands"},{"location":"DK/#docker-container-commands","text":"docker run --name <container_name> <image_name> : Create and run a container docker run -p <host_port>:<container_port> <image_name> : Run a container with port mapping docker run -d <image_name> : Run a container in the background docker start|stop <container_name> : Start or stop a container docker rm <container_name> : Remove a container docker exec -it <container_name> sh : Open a shell inside a running container","title":"Docker Container Commands"},{"location":"Sample/","text":"Multipass summary \u00b6 This is a summary on how to create an instance of a virtual machine using multipass vm. - In this session we are going to be talking about some basic commnand in multipass. - It is also important you know the basic imortance of using a virtual machine. Lets get started To begins you need to install Multipass - use the command sudo apt-get install multipass to install multipass. - use multipass launch <name of instance> to launch an instance of the machine - use multipass shell <instance> to open the shell of your instance on oyur virtual machine. - use multipass list to see the current running machines or the state of oyur instances you created. - If you whish to start an instance use multipass start followded by the name of the instance For example multipass start foo - To stop the instance use multipass stop followed by the name of the instance For example multipass stop foo - Now if i needed to tell you all the other commands that you can use in multipass it will not be able to enter into this page. - To see the different commands you could use on multipass use the command multipass help Importance of using multipass \u00b6 The following are the importance of using Multiopass It helps you to run command that you are scare it might damage your computer. It helps to run applications that are dangerous or harmful to your machine. One of the disavantages of using multipass or virtual machines in general is that it consumes alot of memory as a result computers with less memory cannot run virtual machines with ease. Now lets talk about containers. A container is an isolated environment of used to run an application and test all its neccessary dependencies and packet managers that can work with the application A tool used to create a container is called docker . Lets now learn some of the commands use in creating containers using socker. For more resources on how to use multipass you can visit the following site [How to use multipass] (https://multipass.run/) - The command multipass exec docker-vm --docker ps is used to run a container from your virtual machine on your real machine. Notice that the syntax to run any command on multipass virtual machine is multipass exec <name of vm> --command - docker run hello-world is used to run the container hello-world either on you virtual machine or on your real machine depending o where you run the command. - Oh don't forget docker ps is used to see the processing state of your container. - To see the different images on your container use docker images [For more information about docker visit the following site] (https://www.docker.com/resources/what-container/) - This documentary was made using markdown. ![The markdown logo] (markdown-mark.png)","title":"Multipass summary"},{"location":"Sample/#multipass-summary","text":"This is a summary on how to create an instance of a virtual machine using multipass vm. - In this session we are going to be talking about some basic commnand in multipass. - It is also important you know the basic imortance of using a virtual machine. Lets get started To begins you need to install Multipass - use the command sudo apt-get install multipass to install multipass. - use multipass launch <name of instance> to launch an instance of the machine - use multipass shell <instance> to open the shell of your instance on oyur virtual machine. - use multipass list to see the current running machines or the state of oyur instances you created. - If you whish to start an instance use multipass start followded by the name of the instance For example multipass start foo - To stop the instance use multipass stop followed by the name of the instance For example multipass stop foo - Now if i needed to tell you all the other commands that you can use in multipass it will not be able to enter into this page. - To see the different commands you could use on multipass use the command multipass help","title":"Multipass summary"},{"location":"Sample/#importance-of-using-multipass","text":"The following are the importance of using Multiopass It helps you to run command that you are scare it might damage your computer. It helps to run applications that are dangerous or harmful to your machine. One of the disavantages of using multipass or virtual machines in general is that it consumes alot of memory as a result computers with less memory cannot run virtual machines with ease. Now lets talk about containers. A container is an isolated environment of used to run an application and test all its neccessary dependencies and packet managers that can work with the application A tool used to create a container is called docker . Lets now learn some of the commands use in creating containers using socker. For more resources on how to use multipass you can visit the following site [How to use multipass] (https://multipass.run/) - The command multipass exec docker-vm --docker ps is used to run a container from your virtual machine on your real machine. Notice that the syntax to run any command on multipass virtual machine is multipass exec <name of vm> --command - docker run hello-world is used to run the container hello-world either on you virtual machine or on your real machine depending o where you run the command. - Oh don't forget docker ps is used to see the processing state of your container. - To see the different images on your container use docker images [For more information about docker visit the following site] (https://www.docker.com/resources/what-container/) - This documentary was made using markdown. ![The markdown logo] (markdown-mark.png)","title":"Importance of  using multipass"},{"location":"about/","text":"About This Project \u00b6 This is an example project created with MkDocs and the Material theme. You can add as many pages as you need, and they will automatically be added to the navigation. Key Features \u00b6 Write documentation in Markdown. Use the Material Design theme for a professional look. Host on GitHub Pages easily.","title":"About"},{"location":"about/#about-this-project","text":"This is an example project created with MkDocs and the Material theme. You can add as many pages as you need, and they will automatically be added to the navigation.","title":"About This Project"},{"location":"about/#key-features","text":"Write documentation in Markdown. Use the Material Design theme for a professional look. Host on GitHub Pages easily.","title":"Key Features"},{"location":"multipass/","text":"Multipass summary \u00b6 This is a summary on how to create an instance of a virtual machine using multipass vm. - In this session we are going to be talking about some basic commnand in multipass. - It is also important you know the basic imortance of using a virtual machine. Lets get started To begins you need to install Multipass - use the command sudo apt-get install multipass to install multipass. use multipass launch <name of instance> to launch an instance of the machine use multipass shell <instance> to open the shell of your instance on oyur virtual machine. use multipass list to see the current running machines or the state of oyur instances you created. If you whish to start an instance use multipass start followded by the name of the instance For example multipass start foo To stop the instance use multipass stop followed by the name of the instance For example multipass stop foo Now if i needed to tell you all the other commands that you can use in multipass it will not be able to enter into this page. To see the different commands you could use on multipass use the command multipass help Importance of using multipass \u00b6 The following are the importance of using Multiopass It helps you to run command that you are scare it might damage your computer. It helps to run applications that are dangerous or harmful to your machine. One of the disavantages of using multipass or virtual machines in general is that it consumes alot of memory as a result computers with less memory cannot run virtual machines with ease. Now lets talk about containers. A container is an isolated environment of used to run an application and test all its neccessary dependencies and packet managers that can work with the application A tool used to create a container is called docker . Lets now learn some of the commands use in creating containers using socker. For more resources on how to use multipass you can visit the following site [How to use multipass] (https://multipass.run/) - The command multipass exec docker-vm -- docker ps is used to run a container from your virtual machine on your real machine. Notice that the syntax to run any command on multipass virtual machine is multipass exec <name of vm> -- command - docker run hello-world is used to run the container hello-world either on you virtual machine or on your real machine depending o where you run the command. - Oh don't forget docker ps is used to see the processing state of your container. - To see the different images on your container use docker images For more information about docker visit the following site - This documentary was made using markdown.","title":"Mulipass"},{"location":"multipass/#multipass-summary","text":"This is a summary on how to create an instance of a virtual machine using multipass vm. - In this session we are going to be talking about some basic commnand in multipass. - It is also important you know the basic imortance of using a virtual machine. Lets get started To begins you need to install Multipass - use the command sudo apt-get install multipass to install multipass. use multipass launch <name of instance> to launch an instance of the machine use multipass shell <instance> to open the shell of your instance on oyur virtual machine. use multipass list to see the current running machines or the state of oyur instances you created. If you whish to start an instance use multipass start followded by the name of the instance For example multipass start foo To stop the instance use multipass stop followed by the name of the instance For example multipass stop foo Now if i needed to tell you all the other commands that you can use in multipass it will not be able to enter into this page. To see the different commands you could use on multipass use the command multipass help","title":"Multipass summary"},{"location":"multipass/#importance-of-using-multipass","text":"The following are the importance of using Multiopass It helps you to run command that you are scare it might damage your computer. It helps to run applications that are dangerous or harmful to your machine. One of the disavantages of using multipass or virtual machines in general is that it consumes alot of memory as a result computers with less memory cannot run virtual machines with ease. Now lets talk about containers. A container is an isolated environment of used to run an application and test all its neccessary dependencies and packet managers that can work with the application A tool used to create a container is called docker . Lets now learn some of the commands use in creating containers using socker. For more resources on how to use multipass you can visit the following site [How to use multipass] (https://multipass.run/) - The command multipass exec docker-vm -- docker ps is used to run a container from your virtual machine on your real machine. Notice that the syntax to run any command on multipass virtual machine is multipass exec <name of vm> -- command - docker run hello-world is used to run the container hello-world either on you virtual machine or on your real machine depending o where you run the command. - Oh don't forget docker ps is used to see the processing state of your container. - To see the different images on your container use docker images For more information about docker visit the following site - This documentary was made using markdown.","title":"Importance of  using multipass"}]}